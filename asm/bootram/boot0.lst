                                ;WC-80 COMPUTER BOOTLOADER - alnwlsn 2021
                                ;to be stored at address 0x0000 in rom bank 0 (loads on boot)
                                org 0x0000
                                bootStack equ 0x2000
0000: 3E 80                     ld a,0x80    ;rom 0 -> slot 0 THIS SHOULD BE THE FIRST THING YOU DO WHEN SYSTEM BOOTS
0002: D3 70                     out (0x70),a 
0004: 3E 20                     ld a,0x20    ;ram 0 -> slot 1
0006: D3 71                     out (0x71),a
                                
0008: F3                        di
                                
                                ;set cpu clock
0009: 3E 00                     ld a,0
000B: D3 74                     out (0x74),a
                                
000D: 01 00 10                  ld bc,0x1000   ;copy to RAM 
0010: 11 00 40                  ld de,0x4000
0013: 21 00 00                  ld hl,0x0000
0016: ED B0                     ldir
                                
0018: 3E 20                     ld a,0x20 ;ram 0 -> slot 0
001A: D3 70                     out (0x70),a
                                ;running from ram now *************************************************
001C: 3E 21                     ld a,0x21 ;ram 1 -> slot 1
001E: D3 71                     out (0x71),a
0020: 3E 22                     ld a,0x22 ;ram 2 -> slot 2
0022: D3 72                     out (0x72),a
0024: 3E 23                     ld a,0x23 ;ram 3 -> slot 3
0026: D3 73                     out (0x73),a
0028: 31 00 20                  ld sp,bootStack ;just use the same stack as we will later
                                
                                
002B: 18 3C                     jr vidSetup
                                
                                seek 0x66
                                org 0x66
                                nmiLabel:
0066: C3 35 01                  jp bootMenu
                                
                                vidSetup:
                                	;screen init - setup video RAM
0069: 3E 03                     	ld a,3       ;select font rom --> bank 3 (c000)
006B: D3 73                     	out (0x73),a
006D: 3E F3                     	ld a,0xf3    ;video char ram
006F: D3 5F                     	out (0x5f),a 
0071: 3E 5F                     	ld a,0x5f
0073: D3 5E                     	out (0x5e),a ;use all of 0x5000-0x5fff for video ram
0075: 01 00 10                  	ld bc,0x1000 ;copy trs-80 font to char ram
0078: 11 00 50                  	ld de,0x5000
007B: 21 00 F0                  	ld hl,0xf000
007E: ED B0                     	ldir
0080: 3E E6                     	ld a,0xe6 ;clock speed and #of dot columns
0082: D3 5F                     	out (0x5f),a
0084: 3E 38                     	ld a,0x38 ;VBANK select & mask (0x3c00 for last 1K of VRAM)
0086: D3 5E                     	out (0x5e),a
0088: 3E 00                     	ld a,0x00
008A: 47                        	ld b,a ;b - crtc register offset
008B: 21 9D 00                  	ld hl,trs80VideoTiming
                                	loopVidSetup:
008E: 78                        		ld a,b
008F: FE 10                     		cp 0x10
0091: CA AD 00                  		jp z,vidSetupEnd
0094: D3 5C                     		out (0x5c),a
0096: 7E                        		ld a,(hl)
0097: D3 5D                     		out (0x5d),a
0099: 04                        		inc b
009A: 23                        		inc hl
009B: 18 F1                     		jr loopVidSetup
                                	trs80VideoTiming:
                                	;64x16 6x12 - 0xE6 timing - TRS80 mode, using last 1k of VRAM, at 0x3c00 - 0x38 VBANK
009D: 69 40 50 08 14 0A 10 13   	db 0x69,0x40,0x50,0x08,0x14,0x0a,0x10,0x13,0x00,0x0b,0x00,0x00,0x0c,0x00,0x00,0x00
00A5: 00 0B 00 00 0C 00 00 00 
                                	vidSetupEnd:
                                
                                setupSoundBoard:
00AD: 21 34 09                  	ld hl,LT6903_357
00B0: 3E B4                     	ld a,0b10110100
00B2: CD 4D 08                  	call ltcFset
00B5: 21 44 09                  	ld hl,LT6903_1431
00B8: 3E 9C                     	ld a,0b10011100
00BA: CD 4D 08                  	call ltcFset
00BD: 21 54 09                  	ld hl,LT6903_767
00C0: 3E AC                     	ld a,0b10101100
00C2: CD 4D 08                  	call ltcFset
                                	
00C5: 3E 3C                     	ld a,0b00111100 ;resets the sound chip, and thus clears the interrupt exerted by ym262
00C7: D3 BF                     	out (0xbf),a 
00C9: CD 43 08                  	call wait
00CC: 3E FC                     	ld a,0b11111100
00CE: D3 BF                     	out (0xbf),a 
00D0: CD 43 08                  	call wait
                                
00D3: 3E 02                     	ld a,0x02    ;cassete sound port to no output on the sound board
00D5: D3 FF                     	out (0xff),a 
                                	
00D7: 3E 9F                     	ld a,0x9f	;silence PSG
00D9: D3 A0                     	out (0xa0),a
00DB: 3E BF                     	ld a,0xbf
00DD: D3 A0                     	out (0xa0),a
00DF: 3E DF                     	ld a,0xdf
00E1: D3 A0                     	out (0xa0),a
00E3: 3E FF                     	ld a,0xff
00E5: D3 A0                     	out (0xa0),a
                                
                                	;hardware init
00E7: 3E 00                     	ld a,0x00 ;keyboard latch
00E9: D3 78                     	out (0x78),a
00EB: 3E 80                     	ld a,0x80 ;expint extra ram
00ED: D3 7C                     	out (0x7c),a
00EF: D3 7D                     	out (0x7d),a
00F1: D3 7E                     	out (0x7e),a
00F3: D3 7F                     	out (0x7f),a
                                	;floppy options
00F5: 3E 00                     	ld a,0x00
00F7: D3 F1                     	out (0xf1),a
00F9: D3 F3                     	out (0xf3),a
00FB: D3 F4                     	out (0xf4),a
00FD: D3 F8                     	out (0xf8),a
00FF: 3E 01                     	ld a,0x01
0101: D3 F6                     	out (0xf6),a
0103: 3E 80                     	ld a,0x80
0105: D3 F2                     	out (0xf2),a
0107: 3E F8                     	ld a,0xf8
0109: D3 F0                     	out (0xf0),a
                                	;clear some interrupts
010B: 3A FE 33                  	ld a,(0x33fe) ;dual port ram interrupt
010E: DB F6                     	in a,(0xf6) ;clock interrupt
0110: DB F6                     	in a,(0xf6)
                                
                                	;show boot screen on video output
0112: 01 00 04                  	ld bc,1024 
0115: 11 00 3C                  	ld de,0x3c00
0118: 21 64 09                  	ld hl,bootScreenImage
011B: ED B0                     	ldir
                                	
011D: 3E 00                     	ld a,0
011F: 32 F0 33                  	ld (srCommand),a
0122: 32 F1 33                  	ld (srStatus),a
0125: 32 F5 33                  	ld (srLock),a
                                
                                ;halt ;either halt here and wait, or just keep going
0128: C3 66 00                  jp 0x66
                                
                                ;BOOT PROGRAM RUN *****************************************************
                                ;in a,(0x61) ;check to see if any key in dsky M row is pressed
                                ;cp 0xff
                                ;jp nz,0x4000 ; if, then jump to 0x4000
                                
                                ;<when boot ram is done, please jump back to here>
                                
                                ;BOOT MENU ************************************************************
012B: 42 4F 4F 54 20 4D 45 4E   bootMenuText: DB "BOOT MENU",0
0133: 55 00 
                                bootMenu:
                                	; ;debug display for keyboard (erase when done)
                                	; ld c, 0x6f
                                	; in a,(0x68)
                                	; call ioPrintHex8
                                	; ld c, 0x6d
                                	; in a,(0x64)
                                	; call ioPrintHex8
                                	; ld c, 0x6b
                                	; in a,(0x62)
                                	; call ioPrintHex8
                                	; ld c, 0x69
                                	; in a,(0x61)
                                	; call ioPrintHex8
                                	; jr bootMenu
                                	
0135: DB 61                     	in a,(0x61) ;first, look for the dsky & 0 key held. A will be 0xff if it exists
0137: F6 C0                     	or 0b11000000 ;don't care about highest 2 bits
0139: FE FF                     	cp 0xff
013B: 3E 02                     	ld a,0x02 ;this is our default boot selection
013D: 20 1F                     	jr nz,bootBank ;if no dsky, continue with our default boot selection
                                	
013F: CD EE 05                  	call clear
0142: 21 2B 01                  	ld hl,bootMenuText
0145: CD FB 05                  	call ioStringPrintL
                                	bootMenuLoop:
0148: 0E 62                     	ld c,0x62
014A: 3E 00                     	ld a,0x00
014C: CD 11 06                  	call inputKey8
014F: FE 4D                     	cp "M"
0151: CA D7 01                  	jp z,dskyMonStartPoint
0154: FE 4A                     	cp "J"
0156: CA 80 08                  	jp z, DPIO
0159: FE 58                     	cp "X"
015B: 20 EB                     	jr nz, bootMenuLoop
015D: 78                        	ld a,b
                                	
                                bootBank: ;fill address space with RAM, clear it, copy a rom bank into ram at Slot 0, and jump to 0x0000
                                	;a contains rom bank to use
015E: F5                        	push af
                                	
015F: 21 5F 02                  	ld hl,dskyMonMsgBlank ;clear the dsky display
0162: CD FB 05                  	call ioStringPrintL
                                	
                                	;load in some ram banks (on board ram)
0165: 3E A5                     	ld a,0xA5; ram bank 5 -> slot 1
0167: D3 71                     	out (0x71),a
0169: 3E A6                     	ld a,0xA6; ram bank 6 -> slot 2
016B: D3 72                     	out (0x72),a
016D: 3E A7                     	ld a,0xA7; ram bank 7 -> slot 3
016F: D3 73                     	out (0x73),a
                                	;and clear them
0171: 21 00 40                  	ld hl,0x4000
0174: 01 00 C0                  	ld bc,0xC000
0177: CD CC 01                  	call clearRam
                                	;do the same thing again to clear himem (if that board isn't installed, it will just clear board ram again)
017A: 3E 00                     	ld a,0
017C: D3 7C                     	out (0x7c),a
017E: 3E 01                     	ld a,1
0180: D3 7D                     	out (0x7d),a
0182: 3E 02                     	ld a,2
0184: D3 7E                     	out (0x7e),a
0186: 3E 03                     	ld a,3
0188: D3 7F                     	out (0x7f),a
018A: 3E 26                     	ld a,0x26; ram bank 6 -> slot 2
018C: D3 72                     	out (0x72),a
018E: 3E 27                     	ld a,0x27; ram bank 7 -> slot 3
0190: D3 73                     	out (0x73),a
0192: 21 00 80                  	ld hl,0x8000
0195: 01 00 80                  	ld bc,0x8000
0198: CD CC 01                  	call clearRam
                                	
019B: F1                        	pop af
                                	;load in ram and rom bank to copy
019C: F6 80                     	or 0x80 ;no exram
019E: D3 71                     	out (0x71),a ;rom bank -> slot 1
01A0: 3E A4                     	ld a,0xa4
01A2: D3 72                     	out (0x72),a ;ram bank 4 -> slot 2, no exram
01A4: 01 00 40                  	ld bc,0x4000 ;copy 16k
01A7: 11 00 80                  	ld de,0x8000 ;copy to
01AA: 21 00 40                  	ld hl,0x4000 ;copy from
01AD: ED B0                     	ldir
                                	;slots 1 and 2 back to ram
01AF: 3E 25                     	ld a,0x25; ram bank 5 -> slot 1
01B1: D3 71                     	out (0x71),a
01B3: 3E 26                     	ld a,0x26; ram bank 6 -> slot 2
01B5: D3 72                     	out (0x72),a
                                	
                                	;copy jump code to slot 1
01B7: 01 06 00                  	ld bc,0x0006 ;copy 6
01BA: 11 00 40                  	ld de,0x4000 ;copy to
01BD: 21 C7 01                  	ld hl,jump0code ;copy from
01C0: ED B0                     	ldir
01C2: 3E 24                     	ld a,0x24 ;ram bank 4 ..> slot 0
01C4: C3 00 40                  	jp 0x4000 ;jump to jump code in slot 1
01C7: D3 70 C3 00 00            	jump0code: db 0xD3, 0x70, 0xC3, 0x00, 0x00
                                	
                                
                                clearRam: ;zeros BC bytes starting at HL address
01CC: 78                        	ld a,b
01CD: B1                        	or c
01CE: C8                        	ret z
01CF: 3E 00                     	ld a,0x00
01D1: 77                        	ld (hl),a
01D2: 0B                        	dec bc
01D3: 23                        	inc hl
01D4: 18 F6                     	jr clearRam
01D6: C9                        	ret
                                
                                
                                ;WC-80 - Alnwlsn's Z80 computer ***********************************************
                                ;DSKYMON - Display Keyboard Monitor
                                ;for use with the external keypad/display
                                ;on IO ports 60-6f
                                ;also added functions to read and write to DS1513 Phantom Time Chip (RTC)
                                
                                dskyMonStartPoint:
                                orgAddress equ dskyMonStartPoint ;origin address 
                                org orgAddress
01D7: 31 00 20                  ld sp,bootStack 
                                
01DA: CD C6 03                  call dskyMon_saveregs
01DD: CD EE 05                  call clear
01E0: C3 84 02                  jp dskyMonMemMode ;jump to start of monitor program
                                
                                ;space for some variables for dskymon
                                ;             :			DB "fedc ba98 7654 3210",0
01E3: 00 40                     dskyMonDatMAddr:  		DB 0x00,0x40
01E5: 00                        dskyMonDatIOAddr: 		DB 0
01E6: 20 41 20 20 46 20 20 42   dskyMonMsgRegs3:        DB " A  F  B  C  D  E  H  L X0 X1 Y0 Y1 'A 'F 'B 'C 'D 'E 'H 'L  I "
01EE: 20 20 43 20 20 44 20 20 
01F6: 45 20 20 48 20 20 4C 20 
01FE: 58 30 20 58 31 20 59 30 
0206: 20 59 31 20 27 41 20 27 
020E: 46 20 27 42 20 27 43 20 
0216: 27 44 20 27 45 20 27 48 
021E: 20 27 4C 20 20 49 20 
0225: 00                        dskyMonDatRegP: 		DB 0
0226: 4D 45 4D 20 20 41 00      dskyMonMsgMemA:			DB "MEM  A",0
022D: 4D 45 4D 20 20 44 00      dskyMonMsgMemD:			DB "MEM  D",0
0234: 49 4F 20 20 20 41 00      dskyMonMsgIOA:			DB "IO   A",0
023B: 49 4F 20 20 20 44 00      dskyMonMsgIOD:			DB "IO   D",0
0242: 4A 55 4D 50 20 41 00      dskyMonMsgJump:			DB "JUMP A",0
0249: 43 41 4C 4C 20 41 00      dskyMonMsgCall:			DB "CALL A",0
0250: 52 45 47 53 00            dskyMonMsgRegs:			DB "REGS",0
0255: 43 4F 50 59 00            dskyMonMsgCopy:			DB "COPY",0
025A: 46 49 4C 4C 00            dskyMonMsgFill:			DB "FILL",0
025F: 20 20 20 20 20 20 20 20   dskyMonMsgBlank:		DB "                ",0
0267: 20 20 20 20 20 20 20 20 
026F: 00 
                                
                                dskyMonMemModeAddr: ;enter and edit address for mem data
0270: CD EE 05                  	call clear
0273: 21 26 02                  	ld hl,dskyMonMsgMemA
0276: CD FB 05                  	call ioStringPrintL
0279: 2A E3 01                  	ld hl,(dskyMonDatMAddr)
027C: 0E 67                     	ld c,0x67
027E: CD 35 06                  	call inputKey16 
0281: 22 E3 01                  	ld (dskyMonDatMAddr),hl
                                	;any enter key moves to data mode
                                dskyMonMemMode: ;mem data edit mode
0284: 21 2D 02                  	ld hl,dskyMonMsgMemD
0287: CD FB 05                  	call ioStringPrintL
028A: 2A E3 01                  	ld hl,(dskyMonDatMAddr)
028D: 0E 67                     	ld c,0x67
028F: CD C9 06                  	call ioPrintHex16
0292: 0E 62                     	ld c,0x62
0294: 7E                        	ld a,(hl) ;read data and display
0295: CD 11 06                  	call inputKey8
0298: FE 58                     	cp "X"
029A: 28 21                     	jr z,dskyMonMemMode_Write ;write memory 
029C: FE 28                     	cp "("
029E: 28 26                     	jr z,dskyMonMemMode_Dec ;dec RAM address
02A0: FE 29                     	cp ")"
02A2: 28 28                     	jr z,dskyMonMemMode_Inc ;inc RAM address
02A4: FE 4D                     	cp "M"
02A6: 28 C8                     	jr z,dskyMonMemModeAddr ;enter new ram address
02A8: FE 49                     	cp "I"
02AA: CA D9 02                  	jp z,dskyMonIOModeAddr  ;enter new io address
02AD: FE 56                     	cp "V"
02AF: 28 21                     	jr z,dskyMonMemMode_Read ;read value (ok, but make it obvious)
02B1: FE 4A                     	cp "J"
02B3: CA 50 03                  	jp z,dskyMonCallMode
02B6: FE 4B                     	cp "K"
02B8: CA 60 04                  	jp z,dskyMonRegMode
02BB: 18 C7                     	jr dskyMonMemMode
                                dskyMonMemMode_Write:
02BD: 78                        	ld a,b
02BE: 77                        	ld (hl),a
02BF: 3E 57                     	ld a,"W"
02C1: CD E4 05                  	call dskyMonStatIndicator
02C4: 18 BE                     	jr dskyMonMemMode
                                dskyMonMemMode_Dec:
02C6: 2B                        	dec hl
02C7: 22 E3 01                  	ld (dskyMonDatMAddr),hl
02CA: 18 B8                     	jr dskyMonMemMode
                                dskyMonMemMode_Inc:
02CC: 23                        	inc hl
02CD: 22 E3 01                  	ld (dskyMonDatMAddr),hl
02D0: 18 B2                     	jr dskyMonMemMode
                                dskyMonMemMode_Read:
02D2: 3E 52                     	ld a,"R"
02D4: CD E4 05                  	call dskyMonStatIndicator
02D7: 18 AB                     	jr dskyMonMemMode
                                	
                                dskyMonIOModeAddr: ;enter and edit address for io
02D9: CD EE 05                  	call clear
02DC: 21 34 02                  	ld hl,dskyMonMsgIOA
02DF: CD FB 05                  	call ioStringPrintL
02E2: 3A E5 01                  	ld a,(dskyMonDatIOAddr)
02E5: 0E 66                     	ld c,0x66
02E7: CD 11 06                  	call inputKey8
02EA: 78                        	ld a,b
02EB: 32 E5 01                  	ld (dskyMonDatIOAddr),a
                                dskyMonIOMode: ;any enter key moves to data mode
02EE: 21 3B 02                  	ld hl,dskyMonMsgIOD
02F1: CD FB 05                  	call ioStringPrintL
02F4: 3A E5 01                  	ld a,(dskyMonDatIOAddr)
02F7: 0E 66                     	ld c,0x66
02F9: CD 03 07                  	call ioPrintHexAsc8
02FC: 4F                        	ld c,a
02FD: ED 78                     	in a,(c) ;read data from io address and display
02FF: 0E 62                     	ld c,0x62
0301: CD 11 06                  	call inputKey8
0304: FE 58                     	cp "X"
0306: 28 21                     	jr z,dskyMonIOMode_Write ;write 
0308: FE 28                     	cp "("
030A: 28 2B                     	jr z,dskyMonIOMode_Dec ;dec RAM address
030C: FE 29                     	cp ")"
030E: 28 30                     	jr z,dskyMonIOMode_Inc ;inc RAM address
0310: FE 49                     	cp "I"
0312: 28 C5                     	jr z,dskyMonIOModeAddr ;enter new ram address
0314: FE 4D                     	cp "M"
0316: CA 70 02                  	jp z,dskyMonMemModeAddr ;enter new io address
0319: FE 56                     	cp "V"
031B: 28 2C                     	jr z,dskyMonIOMode_Read ;read value (ok, but make it obvious)
031D: FE 4A                     	cp "J"
031F: CA 50 03                  	jp z,dskyMonCallMode
0322: FE 4B                     	cp "K"
0324: CA 60 04                  	jp z,dskyMonRegMode
0327: 18 C5                     	jr dskyMonIOMode
                                dskyMonIOMode_Write:
0329: 3A E5 01                  	ld a,(dskyMonDatIOAddr)
032C: 4F                        	ld c,a
032D: 78                        	ld a,b
032E: ED 79                     	out (c),a
0330: 3E 57                     	ld a,"W"
0332: CD E4 05                  	call dskyMonStatIndicator
0335: 18 B7                     	jr dskyMonIOMode
                                dskyMonIOMode_Dec:
0337: 3A E5 01                  	ld a,(dskyMonDatIOAddr)
033A: 3D                        	dec a
033B: 32 E5 01                  	ld (dskyMonDatIOAddr),a
033E: 18 AE                     	jr dskyMonIOMode
                                dskyMonIOMode_Inc:
0340: 3A E5 01                  	ld a,(dskyMonDatIOAddr)
0343: 3C                        	inc a
0344: 32 E5 01                  	ld (dskyMonDatIOAddr),a
0347: 18 A5                     	jr dskyMonIOMode
                                dskyMonIOMode_Read:
0349: 3E 52                     	ld a,"R"
034B: CD E4 05                  	call dskyMonStatIndicator
034E: 18 9E                     	jr dskyMonIOMode
                                	
                                dskyMonCallMode: ;menu for CALL
0350: CD EE 05                  	call clear
0353: 21 49 02                  	ld hl,dskyMonMsgCall
0356: CD FB 05                  	call ioStringPrintL
0359: 2A E3 01                  	ld hl,(dskyMonDatMAddr)
035C: 0E 67                     	ld c,0x67
035E: CD 35 06                  	call inputKey16 
0361: 22 E3 01                  	ld (dskyMonDatMAddr),hl
0364: FE 58                     	cp "X"
0366: 28 16                     	jr z,dskyMonCall ;do the call
0368: FE 4D                     	cp "M"
036A: CA 70 02                  	jp z,dskyMonMemModeAddr ;enter new ram address
036D: FE 49                     	cp "I"
036F: CA D9 02                  	jp z,dskyMonIOModeAddr  ;enter new io address
0372: FE 4A                     	cp "J"
0374: CA 8D 03                  	jp z,dskyMonJumpMode
0377: FE 4B                     	cp "K"
0379: CA 60 04                  	jp z,dskyMonRegMode
037C: 18 D2                     	jr dskyMonCallMode
                                dskyMonCall:
037E: 11 87 03                      ld de,$+9 ;return address (returns to line BANANNA)
0381: D5                        	push de 
0382: E5                        	push hl ;jump address
0383: CD 16 04                  	call dskyMon_loadregs
0386: C9                        	ret ;jump to HL^^^
                                	;BANANNA
0387: CD C6 03                  	call dskyMon_saveregs
038A: C3 60 04                  	jp dskyMonRegMode ;go to register mode to view register results
                                	
                                dskyMonJumpMode: ;menu for JUMP
038D: CD EE 05                  	call clear
0390: 21 42 02                  	ld hl,dskyMonMsgJump
0393: CD FB 05                  	call ioStringPrintL
0396: 2A E3 01                  	ld hl,(dskyMonDatMAddr)
0399: 0E 67                     	ld c,0x67
039B: CD 35 06                  	call inputKey16 
039E: 22 E3 01                  	ld (dskyMonDatMAddr),hl
03A1: FE 58                     	cp "X"
03A3: 28 16                     	jr z,dskyMonJump ;do the jump
03A5: FE 4D                     	cp "M"
03A7: CA 70 02                  	jp z,dskyMonMemModeAddr ;enter new ram address
03AA: FE 49                     	cp "I"
03AC: CA D9 02                  	jp z,dskyMonIOModeAddr  ;enter new io address
03AF: FE 4A                     	cp "J"
03B1: CA 50 03                  	jp z,dskyMonCallMode
03B4: FE 4B                     	cp "K"
03B6: CA 60 04                  	jp z,dskyMonRegMode
03B9: 18 D2                     	jr dskyMonJumpMode
                                dskyMonJump:
03BB: E5                        	push hl ;jump address
03BC: 21 5F 02                  	ld hl,dskyMonMsgBlank
03BF: CD FB 05                  	call ioStringPrintL
03C2: CD 16 04                  	call dskyMon_loadregs
03C5: C9                        	ret ;jump to HL
                                	
                                dskyMon_saveregs: ;saves registers to ram
                                	;DB " A  F  B  C  D  E  H  L X0 X1 Y0 Y1 'A 'F 'B 'C 'D 'E 'H 'L  I "
03C6: D9                        	EXX
03C7: 08                        	ex af,af'        ;save from actual regs
03C8: E5                        	push hl ;19 20
03C9: D5                        	push de ;17 18
03CA: C5                        	push bc ;15 16
03CB: F5                        	push af ;13 14
03CC: D9                        	EXX
03CD: 08                        	ex af,af'
03CE: FD E5                     	push iy ;11 12
03D0: DD E5                     	push ix ;9 10
03D2: E5                        	push hl ;7 8
03D3: D5                        	push de ;5 6
03D4: C5                        	push bc ;3 4
03D5: F5                        	push af ;1 2
03D6: CD 10 04                  	call dskyMon_saveRegsC ;get HL with location for A
03D9: C1                        	pop bc ;af
03DA: CD 05 04                  	call dskyMon_saveregsB
03DD: C1                        	pop bc ;bc
03DE: CD 05 04                  	call dskyMon_saveregsB
03E1: C1                        	pop bc ;de
03E2: CD 05 04                  	call dskyMon_saveregsB
03E5: C1                        	pop bc ;hl
03E6: CD 05 04                  	call dskyMon_saveregsB
03E9: C1                        	pop bc ;ix
03EA: CD 05 04                  	call dskyMon_saveregsB
03ED: C1                        	pop bc ;iy
03EE: CD 05 04                  	call dskyMon_saveregsB
03F1: C1                        	pop bc ;af'
03F2: CD 05 04                  	call dskyMon_saveregsB
03F5: C1                        	pop bc ;bc'
03F6: CD 05 04                  	call dskyMon_saveregsB
03F9: C1                        	pop bc ;de'
03FA: CD 05 04                  	call dskyMon_saveregsB
03FD: C1                        	pop bc ;hl'
03FE: CD 05 04                  	call dskyMon_saveregsB
0401: ED 57                     	ld a,i
0403: 77                        	ld (hl),a ;save i
0404: C9                        	ret
                                dskyMon_saveregsB:	;load bc into ram
                                	;pop af (example)
0405: 78                        	ld a,b
0406: 77                        	ld (hl),a ;save a
0407: 79                        	ld a,c
0408: 23                        	inc hl
0409: 23                        	inc hl
040A: 23                        	inc hl 
040B: 77                        	ld (hl),a ;save f
040C: 23                        	inc hl
040D: 23                        	inc hl
040E: 23                        	inc hl
040F: C9                        	ret
                                dskyMon_saveRegsC: ;sets up HL with register RAM store address
0410: 21 E6 01                  	ld hl,dskyMonMsgRegs3 
0413: 23                        	inc hl
0414: 23                        	inc hl ;hl is now save location for reg A
0415: C9                        	ret
                                
                                dskyMon_loadregs: ;loads registers from ram
                                	;DB " A  F  B  C  D  E  H  L X0 X1 Y0 Y1 'A 'F 'B 'C 'D 'E 'H 'L  I "
0416: CD 10 04                  	call dskyMon_saveRegsC ;get HL with location for A
0419: CD 55 04                  	call dskyMon_loadregsB ;load bc with af values
041C: C5                        	push bc ;af
041D: CD 55 04                  	call dskyMon_loadregsB
0420: C5                        	push bc ;bc
0421: CD 55 04                  	call dskyMon_loadregsB
0424: C5                        	push bc ;de
0425: CD 55 04                  	call dskyMon_loadregsB
0428: C5                        	push bc ;hl
0429: CD 55 04                  	call dskyMon_loadregsB
042C: C5                        	push bc ;ix
042D: CD 55 04                  	call dskyMon_loadregsB
0430: C5                        	push bc ;iy
0431: CD 55 04                  	call dskyMon_loadregsB
0434: C5                        	push bc ;af'
0435: CD 55 04                  	call dskyMon_loadregsB
0438: C5                        	push bc ;bc'
0439: CD 55 04                  	call dskyMon_loadregsB
043C: C5                        	push bc ;de'
043D: CD 55 04                  	call dskyMon_loadregsB
0440: C5                        	push bc ;hl'
0441: 7E                        	ld a,(hl)
0442: ED 47                     	ld i,a ;load into actual regs
0444: D9                        	EXX
0445: 08                        	ex af,af'
0446: E1                        	pop hl ;19 20
0447: D1                        	pop de ;17 18
0448: C1                        	pop bc ;15 16
0449: F1                        	pop af ;13 14
044A: D9                        	EXX
044B: 08                        	ex af,af'
044C: FD E1                     	pop iy ;11 12
044E: DD E1                     	pop ix ;9 10
0450: E1                        	pop hl ;7 8
0451: D1                        	pop de ;5 6
0452: C1                        	pop bc ;3 4
0453: F1                        	pop af ;1 2
0454: C9                        	ret
                                dskyMon_loadregsB: ;load bc with next 2 reg values
                                	;af (example)
0455: 7E                        	ld a,(hl) ;load a
0456: 47                        	ld b,a
0457: 23                        	inc hl
0458: 23                        	inc hl
0459: 23                        	inc hl 
045A: 7E                        	ld a,(hl) ;load f
045B: 4F                        	ld c,a
045C: 23                        	inc hl
045D: 23                        	inc hl
045E: 23                        	inc hl
                                	;push bc (example)
045F: C9                        	ret
                                	
                                dskyMonRegMode: ;display/edit registers before and after calls
0460: CD EE 05                  	call clear
0463: 21 50 02                  	ld hl,dskyMonMsgRegs
0466: CD FB 05                  	call ioStringPrintL
0469: 3A 25 02                  	ld a,(dskyMonDatRegP)
046C: 57                        	ld d,a
046D: 21 E6 01                  	ld hl,dskyMonMsgRegs3 
0470: 4F                        	ld c,a
0471: 06 00                     	ld b,0
0473: 09                        	add hl,bc 
0474: 7E                        	ld a,(hl) ;label of register (left char)
0475: D3 65                     	out (0x65),a
0477: 23                        	inc hl
0478: 7E                        	ld a,(hl) ;label of register (right char)
0479: D3 64                     	out (0x64),a
047B: 23                        	inc hl
047C: 7E                        	ld a,(hl) ;stored value for register
047D: 0E 62                     	ld c,0x62
047F: CD 11 06                  	call inputKey8
0482: FE 58                     	cp "X"
0484: 28 1E                     	jr z,dskyMonRegMode_Write ;write 
0486: FE 28                     	cp "("
0488: 28 23                     	jr z,dskyMonRegMode_Dec ;prev register
048A: FE 29                     	cp ")"
048C: 28 2F                     	jr z,dskyMonRegMode_Inc ;next register
048E: FE 49                     	cp "I"
0490: CA D9 02                  	jp z,dskyMonIOModeAddr ;enter new ram address
0493: FE 4D                     	cp "M"
0495: CA 70 02                  	jp z,dskyMonMemModeAddr ;enter new io address
0498: FE 4A                     	cp "J"
049A: CA 50 03                  	jp z,dskyMonCallMode
049D: FE 4B                     	cp "K"
049F: CA D3 04                  	jp z,dskyMonCopyMode
04A2: 18 BC                     	jr dskyMonRegMode
                                dskyMonRegMode_Write:
04A4: 78                        	ld a,b
04A5: 77                        	ld (hl),a
04A6: 3E 57                     	ld a,"W"
04A8: CD E4 05                  	call dskyMonStatIndicator
04AB: 18 B3                     	jr dskyMonRegMode
                                dskyMonRegMode_Dec:
04AD: 7A                        	ld a,d
04AE: 3D                        	dec a
04AF: 3D                        	dec a
04B0: 3D                        	dec a
04B1: FE FD                     	cp 0xfd ;aka -3
04B3: C2 B8 04                  	jp nz, dskyMonRegMode_DecB
04B6: 3E 3C                     	ld a,0x3c ;last byte in regs array
                                	dskyMonRegMode_DecB:
04B8: 32 25 02                  	ld (dskyMonDatRegP),a
04BB: 18 A3                     	jr dskyMonRegMode
                                dskyMonRegMode_Inc:
04BD: 7A                        	ld a,d
04BE: 3C                        	inc a
04BF: 3C                        	inc a
04C0: 3C                        	inc a
04C1: FE 3F                     	cp 0x3f ;+3 over
04C3: C2 C8 04                  	jp nz, dskyMonRegMode_IncB
04C6: 3E 00                     	ld a,0
                                	dskyMonRegMode_IncB:
04C8: 32 25 02                  	ld (dskyMonDatRegP),a
04CB: 18 93                     	jr dskyMonRegMode
                                
04CD: 00 00                     dskyMonCopyMode_Source: db 0x00,0x00
04CF: 00 00                     dskyMonCopyMode_Dest: db 0x00,0x00
04D1: 00 00                     dskyMonCopyMode_Length: db 0x00,0x00
                                dskyMonCopyMode: 
04D3: CD EE 05                      call clear
04D6: 21 55 02                  	ld hl,dskyMonMsgCopy
04D9: CD FB 05                  	call ioStringPrintL
                                	dskyMonCopyMode1:
04DC: 2A CD 04                  		ld hl,(dskyMonCopyMode_Source)
04DF: 0E 6B                     		ld c,0x6b
04E1: CD 35 06                  		call inputKey16
04E4: FE 49                     		cp "I"
04E6: CA D9 02                  		jp z,dskyMonIOModeAddr 
04E9: FE 4D                     		cp "M"
04EB: CA 70 02                  		jp z,dskyMonMemModeAddr
04EE: FE 4A                     		cp "J"
04F0: CA 50 03                  		jp z,dskyMonCallMode
04F3: FE 4B                     		cp "K"
04F5: CA 5A 05                  		jp z,dskyMonFillMode
04F8: FE 58                     		cp "X"
04FA: 20 E0                     		jr nz,dskyMonCopyMode1
04FC: 22 CD 04                  		ld (dskyMonCopyMode_Source),hl
                                	dskyMonCopyMode2:
04FF: 2A CF 04                  		ld hl,(dskyMonCopyMode_Dest)
0502: 0E 67                     		ld c,0x67
0504: CD 35 06                  		call inputKey16
0507: FE 49                     		cp "I"
0509: CA D9 02                  		jp z,dskyMonIOModeAddr 
050C: FE 4D                     		cp "M"
050E: CA 70 02                  		jp z,dskyMonMemModeAddr
0511: FE 4A                     		cp "J"
0513: CA 50 03                  		jp z,dskyMonCallMode
0516: FE 4B                     		cp "K"
0518: CA 5A 05                  		jp z,dskyMonFillMode
051B: FE 58                     		cp "X"
051D: 20 E0                     		jr nz,dskyMonCopyMode2
051F: 22 CF 04                  		ld (dskyMonCopyMode_Dest),hl
                                	dskyMonCopyMode3:
0522: 2A D1 04                  		ld hl,(dskyMonCopyMode_Length)
0525: 0E 63                     		ld c,0x63
0527: CD 35 06                  		call inputKey16
052A: FE 49                     		cp "I"
052C: CA D9 02                  		jp z,dskyMonIOModeAddr 
052F: FE 4D                     		cp "M"
0531: CA 70 02                  		jp z,dskyMonMemModeAddr
0534: FE 4A                     		cp "J"
0536: CA 50 03                  		jp z,dskyMonCallMode
0539: FE 4B                     		cp "K"
053B: CA 5A 05                  		jp z,dskyMonFillMode
053E: FE 58                     		cp "X"
0540: 20 E0                     		jr nz,dskyMonCopyMode3
0542: 22 D1 04                  		ld (dskyMonCopyMode_Length),hl
                                	dskyMonCopyMode_Copy:
0545: ED 4B D1 04               		ld bc,(dskyMonCopyMode_Length)
0549: ED 5B CF 04               		ld de,(dskyMonCopyMode_Dest)
054D: 2A CD 04                  		ld hl,(dskyMonCopyMode_Source)
0550: ED B0                     		ldir
0552: C3 70 02                  		jp dskyMonMemModeAddr
                                		
                                ;fill mode - for filling in areas of RAM with the same value		
0555: 00 00                     dskyMonFillMode_Dest: db 0x00,0x00
0557: 00 00                     dskyMonFillMode_Length: db 0x00,0x00
0559: 00                        dskyMonFillMode_Value: db 0x00
                                dskyMonFillMode: 
055A: CD EE 05                      call clear
055D: 21 5A 02                  	ld hl,dskyMonMsgFill
0560: CD FB 05                  	call ioStringPrintL
                                	dskyMonFillMode1:
0563: 2A 55 05                  		ld hl,(dskyMonFillMode_Dest)
0566: 0E 6B                     		ld c,0x6b
0568: CD 35 06                  		call inputKey16
056B: FE 49                     		cp "I"
056D: CA D9 02                  		jp z,dskyMonIOModeAddr 
0570: FE 4D                     		cp "M"
0572: CA 70 02                  		jp z,dskyMonMemModeAddr
0575: FE 4A                     		cp "J"
0577: CA 50 03                  		jp z,dskyMonCallMode
057A: FE 4B                     		cp "K"
057C: CA 60 04                  		jp z,dskyMonRegMode
057F: FE 58                     		cp "X"
0581: 20 E0                     		jr nz,dskyMonFillMode1
0583: 22 55 05                  		ld (dskyMonFillMode_Dest),hl
                                	dskyMonFillMode2:
0586: 2A 57 05                  		ld hl,(dskyMonFillMode_Length)
0589: 0E 67                     		ld c,0x67
058B: CD 35 06                  		call inputKey16
058E: FE 49                     		cp "I"
0590: CA D9 02                  		jp z,dskyMonIOModeAddr 
0593: FE 4D                     		cp "M"
0595: CA 70 02                  		jp z,dskyMonMemModeAddr
0598: FE 4A                     		cp "J"
059A: CA 50 03                  		jp z,dskyMonCallMode
059D: FE 4B                     		cp "K"
059F: CA 60 04                  		jp z,dskyMonRegMode
05A2: FE 58                     		cp "X"
05A4: 20 E0                     		jr nz,dskyMonFillMode2
05A6: 22 57 05                  		ld (dskyMonFillMode_Length),hl
                                	dskyMonFillMode3:
05A9: 3A 59 05                  		ld a,(dskyMonFillMode_Value)
05AC: 0E 62                     		ld c,0x62
05AE: CD 11 06                  		call inputKey8
05B1: FE 49                     		cp "I"
05B3: CA D9 02                  		jp z,dskyMonIOModeAddr 
05B6: FE 4D                     		cp "M"
05B8: CA 70 02                  		jp z,dskyMonMemModeAddr
05BB: FE 4A                     		cp "J"
05BD: CA 50 03                  		jp z,dskyMonCallMode
05C0: FE 4B                     		cp "K"
05C2: CA 60 04                  		jp z,dskyMonRegMode
05C5: FE 58                     		cp "X"
05C7: 20 E0                     		jr nz,dskyMonFillMode3
05C9: 78                        		ld a,b
05CA: 32 59 05                  		ld (dskyMonFillMode_Value),a
                                	dskyMonFillMode_Fill:
05CD: 3A 59 05                  		ld a,(dskyMonFillMode_Value)
05D0: 47                        		ld b,a
05D1: ED 5B 57 05               		ld de,(dskyMonFillMode_Length)
05D5: 2A 55 05                  		ld hl,(dskyMonFillMode_Dest)
                                		dskyMonFillMode_Fill_Loop:
05D8: 78                        			ld a,b
05D9: 77                        			ld (hl),a
05DA: 23                        			inc hl
05DB: 1B                        			dec de
05DC: 7A                        			ld a,d
05DD: B3                        			or e
05DE: C2 D8 05                  			jp nz,dskyMonFillMode_Fill_Loop
05E1: C3 70 02                  		jp dskyMonMemModeAddr
                                	
                                dskyMonStatIndicator: ;displays ascii in A @69, waits for key release, clears 69
05E4: D3 69                     	out (0x69),a
05E6: CD 55 06                  	call getDskyKeyRelease
05E9: 3E 20                     	ld a," "
05EB: D3 69                     	out (0x69),a
05ED: C9                        	ret
                                	
                                clear: ;clears the 16 character screen
05EE: 0E 6F                     	ld c,0x6f
                                	clearB:
05F0: 3E 20                     	ld a,0x20 ;space char
05F2: ED 79                     	out (c),a
05F4: 0D                        	dec c
05F5: 3E 5F                     	ld a,0x5f ;one less than 0x60
05F7: B9                        	cp c
05F8: 20 F6                     	jr nz,clearB
05FA: C9                        	ret
                                	
                                ioStringPrintL: ;same as ioStringPrint, but always starts at 0x6f (left of leds)    
05FB: 0E 6F                     	ld c,0x6f
05FD: CD 01 06                  	call ioStringPrint
0600: C9                        	ret
                                
                                ioStringPrint: ;print null-terminated strings on hpdl1414 leds
                                               ;takes c - starting address (left most, highest) digit of leds
                                			   ;     hl - starting address (lowest) of string
0601: F5                        	push af
0602: E5                        	push hl
                                	ioStringPrint_G:
0603: 7E                        	ld a,(hl)
0604: FE 00                     	cp 0
0606: 28 06                     	jr z,ioStringPrint_X
0608: ED 79                     	out (c),a
060A: 23                        	inc hl
060B: 0D                        	dec c
060C: 18 F5                     	jr ioStringPrint_G
                                	ioStringPrint_X:
060E: E1                        	pop hl
060F: F1                        	pop af
0610: C9                        	ret
                                
                                inputKey8: ;use keys to enter a 2 character (8 bit) hex character
                                           ;takes   c is address to display 3 characters when entering (io address of LED)
                                		   ;        a existing value to be displayed
                                		   ;returns b (entered data)
                                		   ;        a (returned key, z set if X key pressed)
0611: D5                        	push de
0612: C5                        	push bc
0613: 57                        	ld d,a
                                	inputKey8_b:
0614: 7A                        	ld a,d
0615: CD 03 07                  	call ioPrintHexAsc8
0618: CD 5B 06                  	call getDskyKeyWait
061B: 47                        	ld b,a
061C: E6 F0                     	and 0xf0
                                	;if z, key is 0-f buttons, otherwise, it isn't
061E: 20 0B                     	jr nz, inputKey8_c
0620: 7A                        	ld a,d   ;shift and add the key
0621: E6 0F                     	and 0x0f
0623: 07                        	rlca
0624: 07                        	rlca
0625: 07                        	rlca
0626: 07                        	rlca
0627: 80                        	add a,b 
0628: 57                        	ld d,a
0629: 18 E9                     	jr inputKey8_b
                                	inputKey8_c: ;non number key
062B: 78                        	ld a,b
062C: FE 58                     	cp "X" ;the X key (enter)
                                	inputKey8_X:
062E: 5A                        	ld e,d
062F: 50                        	ld d,b
0630: C1                        	pop bc
0631: 7A                        	ld a,d
0632: 43                        	ld b,e
0633: D1                        	pop de
0634: C9                        	ret
                                
                                inputKey16:;use keys to enter a 4 character (16 bit) hex character
                                           ;takes   c is address to display characters when entering (io address of LED)
                                		   ;        hl existing value to be displayed
                                		   ;returns hl (entered data)
                                		   ;        b,a (returned key, z set if X key pressed)
0635: F5                        	push af
0636: D5                        	push de
0637: C5                        	push bc
                                	inputKey16_b:
0638: CD C9 06                  	call ioPrintHex16
063B: CD 5B 06                  	call getDskyKeyWait
063E: 47                        	ld b,a
063F: E6 F0                     	and 0xf0
                                	;if z, key is 0-f buttons, otherwise, it isn't
0641: 20 09                     	jr nz, inputKey16_c
0643: 29                        	add hl,hl
0644: 29                        	add hl,hl
0645: 29                        	add hl,hl
0646: 29                        	add hl,hl
0647: 78                        	ld a,b
0648: 85                        	add a,l
0649: 6F                        	ld l,a
064A: 18 EC                     	jr inputKey16_b
                                	inputKey16_c: ;non number key
064C: 78                        	ld a,b
064D: FE 58                     	cp "X" ;the X key (enter)
                                	inputKey16_X:
064F: C1                        	pop bc
0650: 47                        	ld b,a
0651: D1                        	pop de
0652: F1                        	pop af
0653: 78                        	ld a,b
0654: C9                        	ret
                                	
                                getDskyKeyRelease: ;waits for all keys to be released
0655: CD 67 06                  	call getDskyKey
0658: 20 FB                     	jr nz,getDskyKeyRelease
065A: C9                        	ret
                                
                                getDskyKeyWait: ;waits for all keys to be released, then waits for a key
065B: CD 55 06                  	call getDskyKeyRelease
                                	getDskyKeyWaitB:
065E: CD 20 07                  	call srCheck
0661: CD 67 06                  	call getDskyKey
0664: 28 F8                     	jr z,getDskyKeyWaitB
0666: C9                        	ret
                                
                                getDskyKey: ;returns A with key scancode (or 255 and z if no key pressed)
0667: C5                        	push bc
0668: D5                        	push de
0669: 1E 00                     	ld e,0
066B: 16 01                     	ld d,1 ;will rotate to bit 0 in a moment
                                	getDskyKey_Col: ;read col at address c and return a
066D: 3E 60                     	ld a,0x60
066F: 82                        	add a,d
0670: CB 02                     	rlc d      ;generates 1,2,4,8 (the columns)
0672: 4F                        	ld c,a
0673: ED 78                     	in a,(c) ;read col address
0675: F6 C0                     	or 0b11000000 ;set & ignore the highest 2 bits
0677: 4F                        	ld c,a
0678: 06 06                     	ld b,6
                                	getDskyKey_loop1:
067A: 3E 01                     	ld a,1
067C: A1                        	and c
067D: F5                        	push af
067E: CB 09                     	rrc c
0680: F1                        	pop af
0681: 28 06                     	jr z, getDskyKeyCols_B 
0683: 10 F5                     	djnz getDskyKey_loop1
                                	;nothing found
0685: 3E FF                     	ld a,255
0687: 18 01                     	jr getDskyKeyCols_X
                                	getDskyKeyCols_B: ;something found
0689: 78                        	ld a,b
                                	getDskyKeyCols_X: ;
                                	;a is col keyboard scan code here (or 255 if not pressed)
068A: FE FF                     	cp 255 ;check if no key was pressed
068C: 47                        	ld b,a
068D: 20 0C                     	jr nz,getDskyKeyCols_Y
068F: 7A                        	ld a,d
0690: FE 10                     	cp 16
0692: 28 16                     	jr z,getDskyKey_Z
0694: 47                        	ld b,a
0695: 3E 06                     	ld a,6
0697: 83                        	add a,e
0698: 5F                        	ld e,a
0699: 18 D2                     	jr getDskyKey_Col
                                	getDskyKeyCols_Y: ;some key was pressed (get ready to return)
                                	;b has col scan
069B: 78                        	ld a,b
069C: 83                        	add a,e
069D: E5                        	push hl
069E: 21 B1 06                  	ld hl,dskyKeyLUT ;lookup table base address
06A1: 06 00                     	ld b,0
06A3: 3D                        	dec a
06A4: 4F                        	ld c,a
06A5: 09                        	add hl,bc ;offset in LUT
06A6: 7E                        	ld a,(hl) ;content of LUT
06A7: E1                        	pop hl
06A8: 18 02                     	jr getDskyKey_Exit
                                	getDskyKey_Z:
                                	;no key pressed
06AA: 3E FF                     	ld a,255
                                	getDskyKey_Exit:
06AC: FE FF                     	cp 255 ;if nokey
06AE: D1                        	pop de
06AF: C1                        	pop bc
06B0: C9                        	ret
                                	dskyKeyLUT:
06B1: 4D                        	DB "M"  ;M
06B2: 0A                        	DB 0x0A ;A
06B3: 07                        	DB 0x07 ;7
06B4: 04                        	DB 0x04 ;4
06B5: 01                        	DB 0x01 ;1
06B6: 00                        	DB 0x00 ;0
06B7: 49                        	DB "I"  ;I
06B8: 0B                        	DB 0x0B ;B
06B9: 08                        	DB 0x08 ;8
06BA: 05                        	DB 0x05 ;5
06BB: 02                        	DB 0x02 ;2
06BC: 28                        	DB "(" ;LEFT
06BD: 4A                        	DB "J"  ;J
06BE: 0C                        	DB 0x0C ;C
06BF: 09                        	DB 0x09 ;9
06C0: 06                        	DB 0x06 ;6
06C1: 03                        	DB 0x03 ;3
06C2: 29                        	DB ")" ;RIGHT
06C3: 4B                        	DB "K"  ;K
06C4: 0D                        	DB 0x0D ;D
06C5: 0E                        	DB 0x0E ;E
06C6: 0F                        	DB 0x0F ;F
06C7: 56                        	DB "V"  ;V
06C8: 58                        	DB "X"  ;X
                                
                                ioPrintHex16: ;write (on ascii LEDs) the 2 character hex value of HL, 
                                              ;starting with left most digit address of C
06C9: F5                        	push af
06CA: C5                        	push bc
06CB: 7C                        	ld a, h
06CC: CD D8 06                  	call ioPrintHex8
06CF: 0D                        	dec c
06D0: 0D                        	dec c
06D1: 7D                        	ld a, l
06D2: CD D8 06                  	call ioPrintHex8
06D5: C1                        	pop bc
06D6: F1                        	pop af
06D7: C9                        	ret
                                
                                ioPrintHex8: ;write (on ascii LEDs) the 2 character hex value of A, 
                                             ;starting with left most digit address of C
06D8: F5                        	push af
06D9: C5                        	push bc
06DA: 47                        	ld b,a
06DB: E6 F0                     	and 0xf0
06DD: 0F                        	rrca
06DE: 0F                        	rrca
06DF: 0F                        	rrca
06E0: 0F                        	rrca
06E1: CD 0F 07                  	call ioPrintHexNibble
06E4: 0D                        	dec c
06E5: 78                        	ld a,b
06E6: CD 0F 07                  	call ioPrintHexNibble
06E9: C1                        	pop bc
06EA: F1                        	pop af
06EB: C9                        	ret
                                
                                ioPrintAsc:     ;writes ascii value of A to hpdl-1414 on C
                                				;writes lowercase as uppercase and above 7f as blank
06EC: F5                        	push af
06ED: FE 61                     	cp 0x61 ;a greater than = 0x61?
06EF: 38 08                     	jr c,ioPrintAsc_a ;no
06F1: FE 7B                     	cp 0x7B ;less than 0x7b?
06F3: 30 04                     	jr nc,ioPrintAsc_a ;no
06F5: D6 20                     	sub 0x20 ;subtract to align with CAPS letters
06F7: 18 06                     	jr ioPrintAsc_b
                                	ioPrintAsc_a:
06F9: FE 80                     	cp 0x80 ;a greater than = 0x80?
06FB: 38 02                     	jr c,ioPrintAsc_b ;no
06FD: 3E 00                     	ld a,0x00
                                	ioPrintAsc_b:
06FF: ED 79                     	out (c),a
0701: F1                        	pop af
0702: C9                        	ret
                                	
                                ioPrintHexAsc8: ;write (on ascii LEDs) the ascii representation of A,
                                				;and the 2 character hex value of A,
                                                ;starting with left most digit address of C
0703: F5                        	push af
0704: C5                        	push bc
0705: CD EC 06                  	call ioPrintAsc
0708: 0D                        	dec c
0709: CD D8 06                  	call ioPrintHex8
070C: C1                        	pop bc
070D: F1                        	pop af
070E: C9                        	ret
                                	
                                ioPrintHexNibble: ;prints lower nibble of a as hex to io c
070F: F5                        	push af
0710: E6 0F                     	and 0x0f
0712: FE 0A                     	cp 0x0a ;if carry, 0x0a>a
0714: 38 04                     	jr c,ioPrintHexNibble_letters
0716: C6 37                     	add a,0x37
0718: 18 02                     	jr ioPrintHexNibble_X
                                	ioPrintHexNibble_letters:
071A: C6 30                     	add a,0x30
                                	ioPrintHexNibble_X:
071C: ED 79                     	out (c),a
071E: F1                        	pop af
071F: C9                        	ret
                                
                                ;//////////////////////////////////////////////Shared RAM LOADER/////////////////////////////////
                                srCommand equ 0x33f0
                                srStatus equ 0x33f1
                                srAddress equ 0x33f2
                                srData equ 0x33f4
                                srLock equ 0x33f5
                                
                                srCheck: ;poll the shared ram, look for changes in command, and act on any command received (non blocking)
0720: F5                        	push af
0721: C5                        	push bc
0722: E5                        	push hl
                                	srCheckLoop:
0723: 3A F1 33                  	ld a,(srStatus)
0726: 47                        	ld b,a
0727: 3A F0 33                  	ld a,(srCommand)
072A: B8                        	cp b
072B: CA 45 07                  	jp z, srCheckExit ;exit if command was not changed
072E: FE 10                     	cp 0x10
0730: 28 1E                     	jr z, srReadMem
0732: FE 20                     	cp 0x20
0734: 28 25                     	jr z, srWriteMem
0736: FE 30                     	cp 0x30
0738: 28 30                     	jr z, srReadIO
073A: FE 40                     	cp 0x40
073C: 28 39                     	jr z, srWriteIO
073E: FE 50                     	cp 0x50
0740: 28 47                     	jr z, srJmp
                                	
                                	
                                	srCheckRet:
0742: 32 F1 33                  		ld (srStatus),a
                                	srCheckExit:
0745: 3A F5 33                  		ld a,(srLock)
0748: FE FF                     		cp 0xff
074A: 28 D7                     		jr z,srCheckLoop
074C: E1                        		pop hl
074D: C1                        		pop bc
074E: F1                        		pop af
074F: C9                        		ret
                                		
                                	srReadMem:
0750: 2A F2 33                  		ld hl,(srAddress)
0753: 7E                        		ld a,(hl)
0754: 32 F4 33                  		ld (srData),a
0757: 3E 10                     		ld a,0x10
0759: 18 E7                     		jr srCheckRet
                                	
                                	srWriteMem:
075B: 3A F4 33                  		ld a,(srData)
075E: 2A F2 33                  		ld hl,(srAddress)
0761: 77                        		ld (hl),a
0762: 7E                        		ld a,(hl)
0763: 32 F4 33                  		ld (srData),a
0766: 3E 20                     		ld a,0x20
0768: 18 D8                     		jr srCheckRet
                                	
                                	srReadIO:
076A: 3A F2 33                  		ld a,(srAddress)
076D: 4F                        		ld c,a
076E: ED 78                     		in a,(c)
0770: 32 F4 33                  		ld (srData),a
0773: 3E 30                     		ld a,0x30
0775: 18 CB                     		jr srCheckRet
                                	
                                	srWriteIO:
0777: 3A F2 33                  		ld a,(srAddress)
077A: 4F                        		ld c,a
077B: 3A F4 33                  		ld a,(srData)
077E: ED 79                     		out (c),a
0780: ED 78                     		in a,(c)
0782: 32 F4 33                  		ld (srData),a
0785: 3E 40                     		ld a,0x40
0787: 18 B9                     		jr srCheckRet
                                	
                                	srJmp:
0789: 2A F2 33                  		ld hl,(srAddress)
078C: 3E 50                     		ld a,0x50
078E: 32 F1 33                  		ld (srStatus),a
0791: F1                        		pop af
0792: F1                        		pop af
0793: F1                        		pop af ;throw away
0794: E9                        		jp (hl)
                                		
                                ;***************************************CLOCK CHIP DISPLAY DEMO**********************************
                                ;demo program for testing out the DS1513 Phantom Time Chip (Realtime clock)
                                
                                ;  org 0x3000
                                burnram equ 0x8000 ;will be written to by the clock read/write functions. Must be in address range of clock chip
                                monaddr equ orgAddress ;monitor address, for a return from this program
                                
                                txb:
0795: 00                        db 0x00
0796: 00                        db 0x00
0797: 00                        db 0x00
0798: 00                        db 0x00
0799: 00                        db 0x00
079A: 00                        db 0x00
079B: 00                        db 0x00
079C: 00                        db 0x00
                                
                                rxb:
079D: 00                        db 0x00
079E: 00                        db 0x00
079F: 00                        db 0x00
07A0: 00                        db 0x00
07A1: 00                        db 0x00
07A2: 00                        db 0x00
07A3: 00                        db 0x00
07A4: 00                        db 0x00
                                
                                seq:
07A5: C5                        db 0xc5
07A6: 3A                        db 0x3a
07A7: A3                        db 0xa3
07A8: 5C                        db 0x5c
07A9: C5                        db 0xc5
07AA: 3A                        db 0x3a
07AB: A3                        db 0xa3
07AC: 5C                        db 0x5c
                                
                                clockdisp8: ;read the clock chip and display the read data in hex on the dsky display (from MS to LS left to right)
07AD: CD 0D 08                  call sendSeq
07B0: 21 9D 07                  ld hl,rxb
07B3: CD 2A 08                  call clockRead
07B6: 0E 61                     ld c,0x61
07B8: 21 9D 07                  ld hl,rxb
                                clockdisp8loop1:
07BB: 7E                        ld a,(hl)
07BC: CD D8 06                  call ioPrintHex8
07BF: 23                        inc hl
07C0: 0C                        inc c
07C1: 0C                        inc c
07C2: 3E 71                     ld a,0x71
07C4: B9                        cp c
07C5: 20 F4                     jr nz,clockdisp8loop1
07C7: DB 61                     in a,(0x61) ;check to see if any key in dsky M row is pressed
07C9: FE FF                     cp 0xff
07CB: C2 D7 01                  jp nz,monaddr
                                ;********************************display clock on built in led displays on 0x74-0x77***********************
07CE: 3A 9D 07                  ld a,(rxb) ;check 10ths of seconds
07D1: E6 F0                     and 0xf0
07D3: FE 90                     cp 0x90
07D5: 28 12                     jr z,clockdisp8blank
07D7: 3A A0 07                  ld a,(rxb+3) ;minutes
07DA: 0E 77                     ld c,0x77
07DC: CD D8 06                  call ioPrintHex8
07DF: 3A 9F 07                  ld a,(rxb+2) ;seconds
07E2: 0E 75                     ld c,0x75
07E4: CD D8 06                  call ioPrintHex8
07E7: 18 C4                     jr clockdisp8
                                clockdisp8blank: ;"blink" off display to show seconds
07E9: 3E 00                     ld a,0
07EB: D3 77                     out (0x77),a
07ED: D3 76                     out (0x76),a
07EF: D3 75                     out (0x75),a
07F1: D3 74                     out (0x74),a
07F3: 18 B8                     jr clockdisp8
                                
                                start:
07F5: CD 0D 08                  call sendSeq
07F8: 21 9D 07                  ld hl,rxb
07FB: CD 2A 08                  call clockRead
07FE: C3 D7 01                  jp monaddr
                                start2:
0801: CD 0D 08                  call sendSeq
0804: 21 95 07                  ld hl,txb
0807: CD 17 08                  call clockWrite
080A: C3 D7 01                  jp monaddr 
                                
                                sendSeq:   ;writes the magic sequence to the clock chip. Uses one byte of extra ram.
080D: 3A 00 80                  ld a,(burnram) ;inital read to reset sequence recognizer pointer inside clock chip
0810: 21 A5 07                  ld hl,seq
0813: CD 17 08                  call clockWrite
0816: C9                        ret
                                
                                clockWrite: ;writes 8 bytes to the clock chip, starting with the first byte at HL
0817: 0E 08                     ld c, 8
                                loop2:
0819: 06 08                     ld b, 8
081B: 7E                        ld a,(hl)
                                loop1:
081C: 32 00 80                  ld (burnram),a
081F: 1F                        rra
0820: 10 FA                     djnz loop1
0822: 23                        inc hl
0823: 0D                        dec c
0824: 79                        ld a,c
0825: FE 00                     cp 0
0827: 20 F0                     jr nz,loop2
0829: C9                        ret
                                
                                clockRead: ;reads 8 bytes from clock chip, places first byte at HL
082A: 0E 08                     ld c, 8
                                loop4:
082C: 06 08                     ld b, 8
                                loop3:
082E: E6 FE                     and 0b11111110
0830: 57                        ld d,a
0831: 3A 00 80                  ld a,(burnram)
0834: E6 01                     and 1 ;keep only D0
0836: 82                        add a,d
0837: 0F                        rrca
0838: 10 F4                     djnz loop3
083A: 77                        ld (hl),a
083B: 23                        inc hl
083C: 0D                        dec c
083D: 79                        ld a,c
083E: FE 00                     cp 0
0840: 20 EA                     jr nz,loop4
0842: C9                        ret
                                
                                wait: 
0843: 11 00 10                  	ld de,0x1000
                                	waitLoop:
0846: 00                        	nop
0847: 1B                        	dec de
0848: 7A                        	ld a,d
0849: B3                        	or e
084A: 20 FA                     	jr nz,waitLoop
084C: C9                        	ret
                                	
                                ltcFset: ;set the frequency of the LTC6903. Call with base value in A, and pointer to bit sequence in HL
                                	;base value is chip select of interest clear, other chip selects set, and sdi and sck clear
                                	;sequence is bytes with value 0 or 1, 16 bytes long, to represent the bits sent over SPI. D15 is first.
084D: 4F                        	ld c,a
084E: 06 10                     	ld b,16
                                	ltcFsetLoop1:
0850: 7E                        	ld a,(hl)
0851: B1                        	or c
0852: D3 BF                     	out (0xbf),a ;clk low
0854: 7E                        	ld a,(hl)
0855: B1                        	or c
0856: F6 02                     	or 0x02
0858: D3 BF                     	out (0xbf),a ;clk high
085A: 23                        	inc hl
085B: 10 F3                     	djnz ltcFsetLoop1
085D: 79                        	ld a,c
085E: D3 BF                     	out (0xbf),a ;done
0860: C9                        	ret
                                	
                                ;light pen test using existing prints
                                lightpen_test:
0861: 3E 10                     	ld a,16
0863: D3 5C                     	out (0x5c),a
0865: DB 5D                     	in a,(0x5d)
0867: 0E 6F                     	ld c,0x6f
0869: CD D8 06                  	call ioPrintHex8
086C: 3E 11                     	ld a,17
086E: D3 5C                     	out (0x5c),a
0870: DB 5D                     	in a,(0x5d)
0872: 0E 6D                     	ld c,0x6d
0874: CD D8 06                  	call ioPrintHex8
0877: DB 5F                     	in a,(0x5f)
0879: 0E 6B                     	ld c,0x6b
087B: CD D8 06                  	call ioPrintHex8
087E: 18 E1                     	jr lightpen_test
                                
                                DPIO:
                                	;DPIO - for reading and writing to whereever in z80 space using a few bytes in the dual port ram as registers
                                	;keep it simple - reads / writes just 1 byte at a time
                                	;this is pretty much driven by whatever is on the other side of the dual port RAM
                                	;orgAdrDPIO equ 0x3000
                                	stackDPIO equ 0x33fe
                                
                                	commandDPIO equ 0x3300
                                	statusDPIO equ commandDPIO+1
                                	addlDPIO equ commandDPIO+2 ;low address - also address for io 
                                	addhDPIO equ commandDPIO+3 ;high address
                                	dataDPIO equ commandDPIO+4 ;data
                                
                                	;commands:
                                	;0 - reset status to 0 / ready for next command
                                	;1 - write [data] to [address]
                                	;2 - read [data] at [address]
                                	;3 - write IO port with [data]
                                	;4 - read IO port to [data]
                                	;5 - jump to [address]
                                
                                	;status
                                	;0 - idle - waiting for next command
                                	;1 - done - reset command 0 can be issued
                                
                                	;org orgAdrDPIO
0880: 31 FE 33                  	ld sp,stackDPIO
                                	
0883: 21 23 09                  	ld hl,DPIOtxt
0886: CD FB 05                  	call ioStringPrintL
                                
                                	mainDPIO: 
0889: 3A 00 33                  		ld a,(commandDPIO) 
088C: FE 00                     		cp 0
088E: C2 89 08                  		jp nz, mainDPIO ;wait for command == 0
                                		
0891: 21 01 33                  		ld hl,statusDPIO
0894: 3E 00                     		ld a,0
0896: CD 02 09                  		call posWriteDPIO ;write 0 -> status
                                		
                                		waitCommandDPIO: ;wait for command != 0
0899: 3A 00 33                  			ld a,(commandDPIO)
089C: FE 00                     			cp 0
089E: CA 99 08                  			jp z, waitCommandDPIO
                                		
08A1: FE 01                     		cp 1
08A3: CA C7 08                  		jp z, writeDPIO
08A6: FE 02                     		cp 2
08A8: CA D5 08                  		jp z, readDPIO
08AB: FE 03                     		cp 3
08AD: CA E3 08                  		jp z, ioutDPIO
08B0: FE 04                     		cp 4 
08B2: CA EE 08                  		jp z, iinDPIO
08B5: FE 05                     		cp 5
08B7: CA F9 08                  		jp z, jjumpDPIO
                                		
                                		mainRetDPIO:
08BA: CD 0A 09                  		call cdispDPIO
08BD: 21 01 33                  		ld hl,statusDPIO
08C0: 3E 01                     		ld a,1
08C2: CD 02 09                  		call posWriteDPIO ;write 1 -> status
                                		
08C5: 18 C2                     		jr mainDPIO
                                
                                	writeDPIO:
08C7: 3A 02 33                  		ld a,(addlDPIO)
08CA: 6F                        		ld l,a
08CB: 3A 03 33                  		ld a,(addhDPIO)
08CE: 67                        		ld h,a
08CF: 3A 04 33                  		ld a,(dataDPIO)
08D2: 77                        		ld (hl),a
08D3: 18 E5                     		jr mainRetDPIO
                                
                                	readDPIO:
08D5: 3A 02 33                  		ld a,(addlDPIO)
08D8: 6F                        		ld l,a
08D9: 3A 03 33                  		ld a,(addhDPIO)
08DC: 67                        		ld h,a
08DD: 7E                        		ld a,(hl)
08DE: 32 04 33                  		ld (dataDPIO),a
08E1: 18 D7                     		jr mainRetDPIO
                                		
                                	ioutDPIO:
08E3: 3A 02 33                  		ld a,(addlDPIO)
08E6: 4F                        		ld c,a
08E7: 3A 04 33                  		ld a,(dataDPIO)
08EA: ED 79                     		out (c),a
08EC: 18 CC                     		jr mainRetDPIO
                                
                                	iinDPIO:
08EE: 3A 02 33                  		ld a,(addlDPIO)
08F1: 4F                        		ld c,a
08F2: ED 78                     		in a,(c)
08F4: 32 04 33                  		ld (dataDPIO),a
08F7: 18 C1                     		jr mainRetDPIO
                                
                                	jjumpDPIO:
08F9: 3A 02 33                  		ld a,(addlDPIO)
08FC: 6F                        		ld l,a
08FD: 3A 03 33                  		ld a,(addhDPIO)
0900: 67                        		ld h,a
0901: E9                        		jp (hl)
                                
                                	posWriteDPIO: ;only returns when value at (hl) matches a
0902: 77                        		ld (hl),a
0903: 47                        		ld b,a
0904: 7E                        		ld a,(hl)
0905: B8                        		cp b
0906: C8                        		ret z
0907: 78                        		ld a,b
0908: 18 F8                     		jr posWriteDPIO
                                		
                                	cdispDPIO:
090A: 0E 67                     		ld c,0x67
090C: 3A 03 33                  		ld a,(addhDPIO)
090F: CD D8 06                  		call ioPrintHex8
0912: 0E 65                     		ld c,0x65
0914: 3A 02 33                  		ld a,(addlDPIO)
0917: CD D8 06                  		call ioPrintHex8
091A: 0E 61                     		ld c,0x61
091C: 3A 04 33                  		ld a,(dataDPIO)
091F: CD D8 06                  		call ioPrintHex8
0922: C9                        		ret
                                	
0923: 44 50 49 4F 20 20 20 20   	DPIOtxt: db "DPIO            ",0
092B: 20 20 20 20 20 20 20 20 
0933: 00 
                                
                                LT6903_357: ;sequence for setting the LT6903 clock to 3.57 MHz
0934: 01 00 01 01 01 01 00 00   db 1,0,1,1,1,1,0,0,1,1,1,1,1,0,0,0
093C: 01 01 01 01 01 00 00 00 
                                
                                LT6903_1431: ;sequence for setting the LT6903 clock to 14.31 MHz
0944: 01 01 00 01 01 01 00 00   db 1,1,0,1,1,1,0,0,1,1,1,1,1,1,0,0
094C: 01 01 01 01 01 01 00 00 
                                
                                LT6903_767: ;sequence for setting the LT6903 clock to 7.67 MHz
0954: 01 01 00 00 01 01 01 00   db 1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0
095C: 00 01 00 00 00 00 00 00 
                                
                                bootScreenImage:
0964: BF 83 83 83 83 83 83 83   db 0xBF, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x57, 0x49, 0x4C, 0x53, 0x4F, 0x4E, 0x20, 0x5A, 0x2D, 0x38, 0x30, 0x20, 0x43, 0x4F, 0x4D, 0x50, 0x55, 0x54, 0x45, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x6C, 0x61, 0x6E, 0x20, 0x57, 0x69, 0x6C, 0x73, 0x6F, 0x6E, 0x20, 0x32, 0x30, 0x32, 0x31, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x54, 0x52, 0x53, 0x2D, 0x38, 0x30, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x20, 0x2D, 0x20, 0x31, 0x30, 0x32, 0x34, 0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x20, 0x36, 0x34, 0x78, 0x31, 0x36, 0x20, 0x2D, 0x20, 0x36, 0x78, 0x31, 0x32, 0x20, 0x66, 0x6F, 0x6E, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4E, 0x4D, 0x49, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xBF, 0xBF, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xBF
096C: 83 83 83 83 83 83 83 83 
0974: 83 83 83 83 83 83 83 83 
097C: 83 83 83 83 83 83 83 83 
0984: 83 83 83 83 83 83 83 83 
098C: 83 83 83 83 83 83 83 83 
0994: 83 83 83 83 83 83 83 83 
099C: 83 83 83 83 83 83 83 BF 
09A4: BF 20 20 20 20 20 20 20 
09AC: 20 20 20 20 20 20 20 20 
09B4: 20 20 20 20 20 57 49 4C 
09BC: 53 4F 4E 20 5A 2D 38 30 
09C4: 20 43 4F 4D 50 55 54 45 
09CC: 52 20 20 20 20 20 20 20 
09D4: 20 20 20 20 20 20 20 20 
09DC: 20 20 20 20 20 20 20 BF 
09E4: BF 20 20 20 20 20 20 20 
09EC: 20 20 20 20 20 20 20 20 
09F4: 20 20 20 20 20 20 20 41 
09FC: 6C 61 6E 20 57 69 6C 73 
0A04: 6F 6E 20 32 30 32 31 20 
0A0C: 20 20 20 20 20 20 20 20 
0A14: 20 20 20 20 20 20 20 20 
0A1C: 20 20 20 20 20 20 20 BF 
0A24: BF 20 20 20 20 20 20 20 
0A2C: 20 20 20 20 20 20 20 20 
0A34: 20 20 20 20 20 20 20 20 
0A3C: 20 20 20 20 20 20 20 20 
0A44: 20 20 20 20 20 20 20 20 
0A4C: 20 20 20 20 20 20 20 20 
0A54: 20 20 20 20 20 20 20 20 
0A5C: 20 20 20 20 20 20 20 BF 
0A64: BF 20 20 20 20 20 20 20 
0A6C: 54 52 53 2D 38 30 20 76 
0A74: 69 64 65 6F 20 6D 6F 64 
0A7C: 65 20 2D 20 31 30 32 34 
0A84: 20 63 68 61 72 73 20 36 
0A8C: 34 78 31 36 20 2D 20 36 
0A94: 78 31 32 20 66 6F 6E 74 
0A9C: 20 20 20 20 20 20 20 BF 
0AA4: BF 20 20 20 20 20 20 20 
0AAC: 20 20 20 20 20 20 20 20 
0AB4: 20 20 20 20 20 20 20 20 
0ABC: 20 20 20 20 20 20 20 20 
0AC4: 20 20 20 20 20 20 20 20 
0ACC: 20 20 20 20 20 20 20 20 
0AD4: 20 20 20 20 20 20 20 20 
0ADC: 20 20 20 20 20 20 20 BF 
0AE4: BF 20 20 20 20 20 20 20 
0AEC: 20 20 20 20 20 20 20 20 
0AF4: 00 01 02 03 04 05 06 07 
0AFC: 08 09 0A 0B 0C 0D 0E 0F 
0B04: 10 11 12 13 14 15 16 17 
0B0C: 18 19 1A 1B 1C 1D 1E 1F 
0B14: 20 20 20 20 20 20 20 20 
0B1C: 20 20 20 20 20 20 20 BF 
0B24: BF 20 20 20 20 20 20 20 
0B2C: 20 20 20 20 20 20 20 20 
0B34: 20 21 22 23 24 25 26 27 
0B3C: 28 29 2A 2B 2C 2D 2E 2F 
0B44: 30 31 32 33 34 35 36 37 
0B4C: 38 39 3A 3B 3C 3D 3E 3F 
0B54: 20 20 20 20 20 20 20 20 
0B5C: 20 20 20 20 20 20 20 BF 
0B64: BF 20 20 20 20 20 20 20 
0B6C: 20 20 20 20 20 20 20 20 
0B74: 40 41 42 43 44 45 46 47 
0B7C: 48 49 4A 4B 4C 4D 4E 4F 
0B84: 50 51 52 53 54 55 56 57 
0B8C: 58 59 5A 5B 5C 5D 5E 5F 
0B94: 20 20 20 20 20 20 20 20 
0B9C: 20 20 20 20 20 20 20 BF 
0BA4: BF 20 20 20 20 20 50 72 
0BAC: 65 73 73 20 20 20 20 20 
0BB4: 60 61 62 63 64 65 66 67 
0BBC: 68 69 6A 6B 6C 6D 6E 6F 
0BC4: 70 71 72 73 74 75 76 77 
0BCC: 78 79 7A 7B 7C 7D 7E 7F 
0BD4: 20 20 20 20 20 20 20 20 
0BDC: 20 20 20 20 20 20 20 BF 
0BE4: BF 20 20 20 20 20 20 4E 
0BEC: 4D 49 20 20 20 20 20 20 
0BF4: 80 81 82 83 84 85 86 87 
0BFC: 88 89 8A 8B 8C 8D 8E 8F 
0C04: 90 91 92 93 94 95 96 97 
0C0C: 98 99 9A 9B 9C 9D 9E 9F 
0C14: 20 20 20 20 20 20 20 20 
0C1C: 20 20 20 20 20 20 20 BF 
0C24: BF 20 20 20 20 20 20 20 
0C2C: 20 20 20 20 20 20 20 20 
0C34: A0 A1 A2 A3 A4 A5 A6 A7 
0C3C: A8 A9 AA AB AC AD AE AF 
0C44: B0 B1 B2 B3 B4 B5 B6 B7 
0C4C: B8 B9 BA BB BC BD BE BF 
0C54: 20 20 20 20 20 20 20 20 
0C5C: 20 20 20 20 20 20 20 BF 
0C64: BF 20 20 20 20 20 20 20 
0C6C: 20 20 20 20 20 20 20 20 
0C74: C0 C1 C2 C3 C4 C5 C6 C7 
0C7C: C8 C9 CA CB CC CD CE CF 
0C84: D0 D1 D2 D3 D4 D5 D6 D7 
0C8C: D8 D9 DA DB DC DD DE DF 
0C94: 20 20 20 20 20 20 20 20 
0C9C: 20 20 20 20 20 20 20 BF 
0CA4: BF 20 20 20 20 20 20 20 
0CAC: 20 20 20 20 20 20 20 20 
0CB4: E0 E1 E2 E3 E4 E5 E6 E7 
0CBC: E8 E9 EA EB EC ED EE EF 
0CC4: F0 F1 F2 F3 F4 F5 F6 F7 
0CCC: F8 F9 FA FB FC FD FE FF 
0CD4: 20 20 20 20 20 20 20 20 
0CDC: 20 20 20 20 20 20 20 BF 
0CE4: BF 20 20 20 20 20 20 20 
0CEC: 20 20 20 20 20 20 20 20 
0CF4: 20 20 20 20 20 20 20 20 
0CFC: 20 20 20 20 20 20 20 20 
0D04: 20 20 20 20 20 20 20 20 
0D0C: 20 20 20 20 20 20 20 20 
0D14: 20 20 20 20 20 20 20 20 
0D1C: 20 20 20 20 20 20 20 BF 
0D24: BF B0 B0 B0 B0 B0 B0 B0 
0D2C: B0 B0 B0 B0 B0 B0 B0 B0 
0D34: B0 B0 B0 B0 B0 B0 B0 B0 
0D3C: B0 B0 B0 B0 B0 B0 B0 B0 
0D44: B0 B0 B0 B0 B0 B0 B0 B0 
0D4C: B0 B0 B0 B0 B0 B0 B0 B0 
0D54: B0 B0 B0 B0 B0 B0 B0 B0 
0D5C: B0 B0 B0 B0 B0 B0 B0 BF 
                                
                                
                                
0D64: [420 bytes]               incbin "conway.bin" ;conway's game of life demo
                                
                                ;this fills in the rest of bank 0 ROM
                                seek 0x3fff
0F08: FF                        db 0xff

0F09:
